package administrator;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class SendReceipt extends javax.swing.JFrame {

    private HashMap<String, String> receiptDataMap = new HashMap<>();
  
    public SendReceipt() {
        initComponents();
        loadReceipts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        userIdField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        receiptTable = new javax.swing.JTable();
        sendReceipt = new javax.swing.JButton();
        goBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        receiptTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        jLabel1.setText("Send Receipt");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Customer ID");

        receiptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Receipt ID"
            }
        ));
        receiptTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiptTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(receiptTable);

        sendReceipt.setBackground(new java.awt.Color(91, 109, 149));
        sendReceipt.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        sendReceipt.setForeground(new java.awt.Color(255, 255, 255));
        sendReceipt.setText("Send");
        sendReceipt.setBorder(null);
        sendReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendReceiptActionPerformed(evt);
            }
        });

        goBack.setBackground(new java.awt.Color(255, 153, 153));
        goBack.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        goBack.setForeground(new java.awt.Color(255, 255, 255));
        goBack.setText("Back");
        goBack.setBorder(null);
        goBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackActionPerformed(evt);
            }
        });

        receiptTextArea.setColumns(20);
        receiptTextArea.setRows(5);
        jScrollPane2.setViewportView(receiptTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(userIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(goBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sendReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(userIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(119, 119, 119)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(goBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(89, 89, 89))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void receiptTableMouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = receiptTable.getSelectedRow();
    
        if (selectedRow == -1) { 
            JOptionPane.showMessageDialog(this, "No receipt selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the Receipt ID from the table
        String receiptId = receiptTable.getValueAt(selectedRow, 0).toString();

        // Retrieve full receipt details from HashMap
        String receiptDetails = receiptDataMap.get(receiptId);

        if (receiptDetails != null) {
            receiptTextArea.setText(receiptDetails);
        } else {
            receiptTextArea.setText("No details found for this receipt.");
        }
    }

    private void sendReceiptActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = receiptTable.getSelectedRow();
    
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a receipt first!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String enteredUserId = userIdField.getText();
        if (enteredUserId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a User ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the selected Receipt ID from the table
        String receiptId = receiptTable.getValueAt(selectedRow, 0).toString();

        // Retrieve full receipt details from HashMap
        String receiptDetails = receiptDataMap.get(receiptId);

        if (receiptDetails == null) {
            JOptionPane.showMessageDialog(this, "No details found for the selected receipt!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Extract the correct User ID from receipt details
        String receiptUserId = null;
        String[] lines = receiptDetails.split("\n");
        for (String line : lines) {
            if (line.startsWith("User ID:")) {
                receiptUserId = line.substring(8).trim();
                break;
            }
        }

        // Validate User ID
        if (!enteredUserId.equals(receiptUserId)) {
            JOptionPane.showMessageDialog(this, "User ID does not match the selected receipt!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the Username from the receipt details
        String receiptUsername = null;
        for (String line : lines) {
            if (line.startsWith("Username:")) {
                receiptUsername = line.substring(10).trim();
                break;
            }
        }

        // Show confirmation pop-up
        JOptionPane.showMessageDialog(this, "Receipt has been sent to:\nUsername: " + receiptUsername + 
                "\nUser ID: " + enteredUserId, "Receipt Sent", JOptionPane.INFORMATION_MESSAGE);
    }

    private void goBackActionPerformed(java.awt.event.ActionEvent evt) {
        AdminMenu menu = new AdminMenu();
        menu.setVisible(true);
        this.dispose();
    }
  
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SendReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SendReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SendReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SendReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SendReceipt().setVisible(true);
            }
        });
    }
    
    private void loadReceipts() {
        DefaultTableModel model = (DefaultTableModel) receiptTable.getModel();
        model.setRowCount(0); // Clear existing data

        try (BufferedReader reader = new BufferedReader(new FileReader("receipts.txt"))) {
            String line;
            StringBuilder receiptDetails = new StringBuilder();
            String receiptId = null;

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Receipt ID:")) {
                    if (receiptId != null) { // Save the previous receipt before moving to the next
                        model.addRow(new Object[]{receiptId});
                        receiptDataMap.put(receiptId, receiptDetails.toString());
                    }
                    receiptId = line.substring(11).trim();
                    receiptDetails = new StringBuilder(line + "\n");
                } else {
                    receiptDetails.append(line).append("\n");
                    }
                }

                // Save the last receipt
                if (receiptId != null) {
                model.addRow(new Object[]{receiptId});
                receiptDataMap.put(receiptId, receiptDetails.toString());
            }
        } catch (IOException e) {
            System.out.println("Error reading receipts file: " + e.getMessage());
        }
    }

    private void addReceiptToTable(DefaultTableModel model, List<String> receiptData) {
        String receiptId = "", date = "", username = "", userId = "", balance = "";

        for (String line : receiptData) {
            if (line.startsWith("Receipt ID:")) receiptId = line.substring(11);
            else if (line.startsWith("Date:")) date = line.substring(6);
            else if (line.startsWith("Username:")) username = line.substring(10);
            else if (line.startsWith("User ID:")) userId = line.substring(8);
            else if (line.startsWith("Wallet Balance:")) balance = line.substring(15);
        }

        model.addRow(new Object[]{receiptId, date, username, userId, balance});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable receiptTable;
    private javax.swing.JTextArea receiptTextArea;
    private javax.swing.JButton sendReceipt;
    private javax.swing.JTextField userIdField;
    // End of variables declaration//GEN-END:variables
}
